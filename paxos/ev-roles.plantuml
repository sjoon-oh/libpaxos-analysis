@startuml ev-roles

' online plantuml server : https://www.plantuml.com/plantuml/uml/


struct proposer {
    {field} id : int
    {field} acceptors : int
    {field} values : struct carray*
    {field} max_trim_iid : uint32_t
    {field} next_prepare_iid : uint32_t
    {field} prepare_instances : kh_instance_t
    {field} accept_instances : kh_instance_t
}

struct kh_instance_t {
    {field} n_buckets : uint32_t
    {field} size : uint32_t
    {field} n_occupied : uint32_t
    {field} upper_bound : uint32_t
    {field} flags : uint32_t*
    {field} keys : uint32_t*
    {field} vals : struct instance*
}

struct instance
{
    {field} iid : uint32_t
    {field} ballot : uint32_t
    {field} value : paxos_value*
    {field} promised_value : paxos_value*
    {field} value_ballot : uint32_t
    {field} quorum : struct quorum
    {field} created_at : struct timeval
}

proposer *-- "prepare_instances, accept_instances" kh_instance_t
kh_instance_t *-- "vals" instance

' paxos_value
struct paxos_value {
    {field} paxos_value_len : int
    {field} paxos_value_val : char*
}

instance *-- "value" paxos_value

' struct quorum
struct quorum {
    {field} count : count
    {field} quorum : quorum
    {field} acceptors : acceptors
    {field} acceptor_ids : int*
}

instance *-- "quorum" quorum

' learner
struct learner {
    {field} acceptors : int
    {field} late_start : int
    {field} current_iid : uint32_t
    {field} highest_iid_closed: uint32_t
    {field} instances : kh_instance_t
}

learner *-- "instances" kh_instance_t

struct acceptor 
{
    {field} id : int
    {field} trim_iid : uint32_t
    {field} store : struct storage
}

struct storage {
    {field} handle : void*
    {field} api : //Anonymous STRUCT//
}

acceptor *-- "store" storage

struct "Anonymous STRUCT" {
    {method} open
    {method} close
    {method} tx_begin
    {method} tx_commit
    {method} tx_abort
    {method} get
    {method} put
    {method} trim
    {method} get_trim_instance
}

storage *-- "api" "Anonymous STRUCT"

' peer series
enum paxos_message_type
{
    PAXOS_PREPARE    
    PAXOS_PROMISE    
    PAXOS_ACCEPT    
    PAXOS_ACCEPTED    
    PAXOS_PREEMPTED    
    PAXOS_REPEAT    
    PAXOS_TRIM    
    PAXOS_ACCEPTOR_STATE    
    PAXOS_CLIENT_VALUE
}    


' ---- Peer starts from here
struct peer
{
    {field} id : int
    {field} status : int
    {field} bev : struct bufferevent*
    {field} reconnect_ev : struct event*
    {field} addr : sockaddr_in
    {field} peers : struct peers*
}

struct subscription
{
    {field} type : paxos_message_type
    {field} arg : void*
    ' {method} callback : peer_cb
    {field} callback : void* (struct peer*, paxos_message*, void*)
}

subscription *-- "type" paxos_message_type

struct peers
{
    {field} peers_count : int
    {field} clients_count : int
    {field} peers : struct peer**
    {field} clients : struct peer**
    {field} listener : struct evconnlistener*
    {field} base : struct event_base
    {field} config : evpaxos_config*
    {field} subs_count : int
    {field} subs[32] : struct subscription
}

peer *-- "peers" peers
peers *-- "subs" subscription
peers *-- "peers, clients" peer

struct evpaxos_config
{
    {field} proposers_count : int
    {field} acceptors_count : int
    {field} proposers[MAX_N_OF_PROPOSERS] : struct address
    {field} acceptors[MAX_N_OF_PROPOSERS] : struct address
}

struct address
{
    {field} addr : char*
    {field} port : int
}

evpaxos_config *-- "proposers, acceptors" address
peers *-- "config" evpaxos_config




' Starts from EV-series

struct evacceptor {
    {field} peers : struct peers*
    {field} state : struct acceptor*
    {field} timer_ev : struct event*
    {field} timer_tv : struct timeval
}

evacceptor *-- "peers" peers
evacceptor *-- "state" acceptor

struct evlearner {
    {field} state : struct learner*
    {field} delfun : void (*deliver_function)(unsigned, char*, size_t, void*)
    {field} delarg : void*1
    {field} hole_timer : struct event*
    {field} tv : struct timeval
    {field} acceptors : struct peers*
}

evlearner *-- "state" learner
evlearner *-- "acceptors" peers

struct evproposer {
    {field} id : int 
    {field} preexec_window : int
    {field} state : struct proposer*
    {field} peers : struct peers*
    {field} tv : struct timeval
    {field} timeout_ev : struct event*
}

evproposer *-- "state" proposer
evproposer *-- "peers" peers

struct evpaxos_replica {
    {field} peers : struct peers*
    {field} learner : struct evlearner*
    {field} proposer : struct evproposer*
    {field} acceptor : struct evacceptor*
    {field} deliver : void (*deliver_function)(unsigned, char*, size_t, void*)
    {field} arg : void*
}

evpaxos_replica *-- "peers" peers
evpaxos_replica *-- "learner" evlearner
evpaxos_replica *-- "acceptor" evacceptor
evpaxos_replica *-- "proposer" evproposer

@enduml

