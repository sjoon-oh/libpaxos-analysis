@startuml

participant evproposer order 1
collections evacceptor order 2
collections evlearner order 3
database "evacceptor \nstorage" order 4

?--> evproposer: evproposer_preexec_once ()

collections evacceptor

activate evproposer
evproposer -> evproposer: **proposer_preexecute ()** \nproposer_prepare ()

activate evproposer

rnote over evproposer
    //proposer_prepare//
    ---
    1. Prepares //ballot//.
    2. Make new //prepare_instance// for.
        //preexec_window//.
end note

'hnote over evproposer
'    for //preexec_window//
'end note
deactivate evproposer

evproposer -> evacceptor: peer_send_prepare () \nfor //preexec_window//
activate evacceptor
evproposer -> evacceptor
evproposer -> evacceptor

deactivate evproposer

evacceptor -> evacceptor: **evacceptor_handle_prepare ()**\nacceptor_receive_prepare ()

activate evacceptor
evacceptor -> "evacceptor \nstorage": storage_tx_begin () \nstorage_put_record ()\nstorage_tx_commit ()
"evacceptor \nstorage" --> evacceptor: No error
deactivate evacceptor

evacceptor -> evproposer: paxos_accepted_to_promise () \nsend_paxos_message ()

deactivate evacceptor
activate evproposer

evproposer -> evproposer: **evproposer_handle_promise ()** \nproposer_receive_promise ()
activate evproposer

rnote over evproposer
    //proposer_receive_promise//
    ---
    1. Check if "//ack->ballot > inst->ballot//".
        If true, then make it //preempt//.
    2. Wait for all //evacceptor// to respond.

end note

alt #Pink preempt 
    evproposer -> evacceptor: peer_send_prepare ()
else #Lightblue no preempt
    evproposer ->x evacceptor: Nop
end


evproposer -> evproposer: **try_accept ()** \nproposer_accept ()
activate evproposer

rnote over evproposer
    //proposer_accept//
    ---
    1. Wait for quorums to respond.
    2. Move //prepare_instances// to 
        //accept_instances//.
end note

evproposer -> evacceptor: instance_to_accept () \npeer_send_accept ()

activate evacceptor
evacceptor -> evacceptor: **evacceptor_handle_accept ()** \naccept_receive_accept ()
activate evacceptor

evproposer -> evproposer: **proposer_preexecute ()** \nprposer_prepare ()
deactivate evproposer

evproposer -> evacceptor: peer_send_prepare () \n...
deactivate evproposer
deactivate evproposer

alt #Pink preempt
    evacceptor -> evproposer: paxos_accepted_to_preempted () \nsend_paxos_message ()
    activate evproposer

    evproposer -> evproposer: **evproposer_handle_preempted ()** \nproposer_receive_preempted ()

    activate evproposer

    rnote over evproposer
        //proposer_receive_preempted//
        ---
        Check if "//ack->ballot > inst->ballot//"
          If true, move //accept_instances// to 
          //prepare_instances//, and run
          //proposer_preempt// (Clear instance)
    end note

    alt preempt enabled
    evproposer -> evacceptor: peer_send_prepare () \n...
    evproposer -> evproposer: **try_accept ()** \nproposer_accept () \n...  
    
    deactivate evproposer
    end

    deactivate evproposer

else #Lightblue no preempt
    evacceptor -> "evacceptor \nstorage": storage_tx_begin () \nstorage_put_record ()\nstorage_tx_commit ()
    "evacceptor \nstorage" --> evacceptor: No error

    evacceptor -> evacceptor: paxos_accept_to_accepted ()
    evacceptor -> evproposer++: peer_send_paxos_message ()
    evacceptor -> evlearner++: peer_send_paxos_message ()

    deactivate evacceptor
    deactivate evacceptor    

    evproposer -> evproposer++: **evproposer_handle_accepted ()** \nproposer_receive_accepted ()
    evlearner -> evlearner++: **evlearner_handle_accepted ()** \nlearner_receive_accepted ()

    rnote over evproposer
        //proposer_receive_accepted//
        ---
        1. Wait for quorums to send //accepted//.
        2. If all has ACKed, reset the instance 
            record.
    end note

    rnote over evlearner
        //learner_receive_accepted//
        ---
        1. Create if given instance does not exist.
        2. Update the instance with given //accept//
            value.
    end note

    evlearner -> evlearner++: evlearner_deliver_next_closed () \n**l->delfun ()**
end 

deactivate evlearner
deactivate evlearner
deactivate evlearner

evproposer -> evproposer: **try_accept ()** \nproposer_accept () \n...

====

@enduml